package gui.frames;


import classes.EmployeeUtils;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import java.io.File;
import javax.swing.table.DefaultTableModel;


public class LeaveRequestsPage extends javax.swing.JFrame {

    public static DefaultTableModel employeeTableModel;
    
    /**
     * Creates new form LeaveRequestsPage
     */
    
    public LeaveRequestsPage() {
        initComponents();
        this.setSize(950, 580);
        addLeaveLogsToJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBody = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jPanelNavBar = new javax.swing.JPanel();
        jButtonBack = new javax.swing.JButton();
        jButtonReject = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLeaveLogs = new javax.swing.JTable();
        jButtonApprove = new javax.swing.JButton();
        jPanelHeaderLeaveManagement = new javax.swing.JPanel();
        jLabelLeaveManagement = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanelBody.setBackground(new java.awt.Color(255, 255, 255));
        jPanelBody.setMaximumSize(new java.awt.Dimension(970, 550));
        jPanelBody.setLayout(null);

        jPanel4.setBackground(new java.awt.Color(179, 203, 179));
        jPanel4.setLayout(null);

        jButton13.setBackground(new java.awt.Color(254, 254, 225));
        jButton13.setFont(new java.awt.Font("Lucida Bright", 1, 12)); // NOI18N
        jButton13.setText("Back");
        jButton13.setBorderPainted(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton13);
        jButton13.setBounds(0, 10, 130, 50);

        jPanelBody.add(jPanel4);
        jPanel4.setBounds(0, 0, 0, 550);

        jPanelNavBar.setBackground(new java.awt.Color(0, 51, 102));
        jPanelNavBar.setLayout(null);

        jButtonBack.setBackground(new java.awt.Color(204, 0, 0));
        jButtonBack.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButtonBack.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBack.setText("Back");
        jButtonBack.setBorderPainted(false);
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });
        jPanelNavBar.add(jButtonBack);
        jButtonBack.setBounds(10, 10, 150, 50);

        jPanelBody.add(jPanelNavBar);
        jPanelNavBar.setBounds(0, 0, 170, 550);

        jButtonReject.setBackground(new java.awt.Color(204, 0, 0));
        jButtonReject.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        jButtonReject.setForeground(new java.awt.Color(255, 255, 255));
        jButtonReject.setText("Reject");
        jButtonReject.setBorderPainted(false);
        jButtonReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRejectActionPerformed(evt);
            }
        });
        jPanelBody.add(jButtonReject);
        jButtonReject.setBounds(770, 480, 130, 40);

        jTableLeaveLogs.setBackground(new java.awt.Color(255, 255, 204));
        jTableLeaveLogs.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTableLeaveLogs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee #", "Last Name", "First Name", "Department", "Leave Type", "Start Date", "End Date", "Total Days", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableLeaveLogs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableLeaveLogs.setSelectionBackground(new java.awt.Color(0, 51, 102));
        jTableLeaveLogs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableLeaveLogs.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableLeaveLogs);
        if (jTableLeaveLogs.getColumnModel().getColumnCount() > 0) {
            jTableLeaveLogs.getColumnModel().getColumn(0).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(0).setHeaderValue("Employee #");
            jTableLeaveLogs.getColumnModel().getColumn(1).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(1).setHeaderValue("Last Name");
            jTableLeaveLogs.getColumnModel().getColumn(2).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(2).setHeaderValue("First Name");
            jTableLeaveLogs.getColumnModel().getColumn(3).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(3).setHeaderValue("Department");
            jTableLeaveLogs.getColumnModel().getColumn(4).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(4).setHeaderValue("Leave Type");
            jTableLeaveLogs.getColumnModel().getColumn(5).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(5).setHeaderValue("Start Date");
            jTableLeaveLogs.getColumnModel().getColumn(6).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(6).setHeaderValue("End Date");
            jTableLeaveLogs.getColumnModel().getColumn(7).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(7).setHeaderValue("Total Days");
            jTableLeaveLogs.getColumnModel().getColumn(8).setResizable(false);
            jTableLeaveLogs.getColumnModel().getColumn(8).setHeaderValue("Status");
        }
        jTableLeaveLogs.getAccessibleContext().setAccessibleName("");

        jPanelBody.add(jScrollPane1);
        jScrollPane1.setBounds(200, 100, 700, 340);

        jButtonApprove.setBackground(new java.awt.Color(0, 51, 102));
        jButtonApprove.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        jButtonApprove.setForeground(new java.awt.Color(255, 255, 255));
        jButtonApprove.setText("Approve");
        jButtonApprove.setBorderPainted(false);
        jButtonApprove.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jButtonApproveAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jButtonApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApproveActionPerformed(evt);
            }
        });
        jPanelBody.add(jButtonApprove);
        jButtonApprove.setBounds(630, 480, 130, 40);

        jPanelHeaderLeaveManagement.setBackground(new java.awt.Color(0, 51, 102));
        jPanelHeaderLeaveManagement.setLayout(null);

        jLabelLeaveManagement.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        jLabelLeaveManagement.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLeaveManagement.setText("Leave Management");
        jPanelHeaderLeaveManagement.add(jLabelLeaveManagement);
        jLabelLeaveManagement.setBounds(270, 0, 200, 40);

        jPanelBody.add(jPanelHeaderLeaveManagement);
        jPanelHeaderLeaveManagement.setBounds(200, 20, 700, 40);

        getContentPane().add(jPanelBody);
        jPanelBody.setBounds(0, 0, 940, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void addLeaveLogsToJTable() {
        String fileName = "src\\csv\\files\\employeeLeaveLogs.csv";
        CSVReader reader = null;
        
        try {
            // Create a new CSVReader
            reader = new CSVReader(new FileReader(fileName));
            // Discard the header row
            reader.readNext();
            // Initialize a list to hold rows
            List<String[]> rows = new ArrayList<>();
            // Read all remaining rows
            String[] row;
            while ((row = reader.readNext()) != null) {
                rows.add(row);
            }
            // Get the table model from the jTableLeaveLogs component
            DefaultTableModel model = (DefaultTableModel) jTableLeaveLogs.getModel();

            // Add rows to the table
            for (String[] rowData : rows) {
                if (rowData.length > 8) {
                    // Extract the Employee number, Last Name, First Name, Department, Leave Type, Start Date, End Date, Total Days and Status columns
                    String[] selectedData = {rowData[0], rowData[1], rowData[2], rowData[3], rowData[4], rowData[5], rowData[6], rowData[7], rowData[8]};
                    model.addRow(selectedData);
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
    
    
    private boolean updateCsv(String[] updatedLeaveStatus, String employeeNumber) {
        String fileName = "src\\csv\\files\\employeeLeaveLogs.csv";
        CSVReader reader = null;
        CSVWriter writer = null;
        boolean isFound = false;
        String[] record;

        try {
            reader = new CSVReader(new FileReader(fileName));
            writer = new CSVWriter(new FileWriter(fileName + ".tmp"));

            while ((record = reader.readNext()) != null) {
                if (record[0].equals(employeeNumber)) {
                    writer.writeNext(updatedLeaveStatus);
                    isFound = true;
                } else {
                    writer.writeNext(record);
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }

        if (isFound) {
            new File(fileName).delete();
            new File(fileName + ".tmp").renameTo(new File(fileName));
            return true;
        } else {
            new File(fileName + ".tmp").delete();
            return false;
        }
    }
    
    
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButtonRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRejectActionPerformed
        // TODO add your handling code here:
        int selectedRow;

        try {
            selectedRow = jTableLeaveLogs.getSelectedRow();
            if (selectedRow != -1) {
                // Get the employee number and current row data of the selected row
                String employeeNumber = jTableLeaveLogs.getValueAt(selectedRow, 0).toString();
                String[] rowData = new String[jTableLeaveLogs.getColumnCount()];
                for (int i = 0; i < jTableLeaveLogs.getColumnCount(); i++) {
                    rowData[i] = jTableLeaveLogs.getValueAt(selectedRow, i).toString();
                }

                // Show confirmation dialog
                int response = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to reject this leave request?",
                        "Confirm Rejection",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    // Update the Status cell to "Rejected"
                    rowData[8] = "Rejected";

                    // Update the CSV file
                    boolean isUpdated = updateCsv(rowData, employeeNumber);
                    if (isUpdated) {
                        // Update the table model
                        ((DefaultTableModel) jTableLeaveLogs.getModel()).setValueAt("Rejected", selectedRow, 8);
                        JOptionPane.showMessageDialog(null, "The leave request has been rejected.", "Action Completed", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to update the leave request in the CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a leave request to reject.", "Invalid input", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An error occurred during leave request rejection.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRejectActionPerformed
    
    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        EmployeeUtils.navigateBack(this);
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApproveActionPerformed
        // TODO add your handling code here:
        int selectedRow;

        try {
            selectedRow = jTableLeaveLogs.getSelectedRow();
            if (selectedRow != -1) {
                // Get the employee number and current row data of the selected row
                String employeeNumber = jTableLeaveLogs.getValueAt(selectedRow, 0).toString();
                String[] rowData = new String[jTableLeaveLogs.getColumnCount()];
                for (int i = 0; i < jTableLeaveLogs.getColumnCount(); i++) {
                    rowData[i] = jTableLeaveLogs.getValueAt(selectedRow, i).toString();
                }

                // Show confirmation dialog
                int response = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to approve this leave request?",
                        "Confirm Approval",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    // Update the Status cell to "Approved"
                    rowData[8] = "Approved";

                    // Update the CSV file
                    boolean isUpdated = updateCsv(rowData, employeeNumber);
                    if (isUpdated) {
                        // Update the table model
                        ((DefaultTableModel) jTableLeaveLogs.getModel()).setValueAt("Approved", selectedRow, 8);
                        JOptionPane.showMessageDialog(null, "The leave request has been approved.", "Action Completed", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to update the leave request in the CSV file.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a leave request to approve.", "Invalid input", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "An error occurred during leave request approval.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButtonApproveActionPerformed

    private void jButtonApproveAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jButtonApproveAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonApproveAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaveRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaveRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaveRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaveRequestsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaveRequestsPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButtonApprove;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonReject;
    private javax.swing.JLabel jLabelLeaveManagement;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelBody;
    private javax.swing.JPanel jPanelHeaderLeaveManagement;
    private javax.swing.JPanel jPanelNavBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableLeaveLogs;
    // End of variables declaration//GEN-END:variables
}
